# SPDX-License-Identifier: GPL-2.0-or-later
# Copyright (C) 2024 Texas Instruments Incorporated - https://www.ti.com/
#

source [find bitsbytes.tcl]

# Device info
if { [info exists CHIPNAME] } {
	set _CHIPNAME $CHIPNAME
} else {
	set _CHIPNAME cc2340rx
}

if { [info exists CPUTAPID] } {
	set _DAP_TAPID $CPUTAPID
} else {
	set _DAP_TAPID 0x4ba00477
}

if { [info exists DAP_SWD_ID] } {
	set _DAP_SWD_ID $DAP_SWD_ID
} else {
	set _DAP_SWD_ID 0x2ba01477
}

source [find target/swj-dp.tcl]

if { [using_jtag] } {
	set _DAP_ID $_DAP_TAPID
} else {
	set _DAP_ID $_DAP_SWD_ID
}

# Create and add DAP and target
swj_newdap $_CHIPNAME cpu -irlen 4 -expected-id $_DAP_ID
dap create $_CHIPNAME.dap -chain-position $_CHIPNAME.cpu

set _TARGETNAME $_CHIPNAME.cpu
target create $_TARGETNAME cortex_m -dap $_CHIPNAME.dap

# RAM
if { [info exists WORKAREABASE] } {
	set _WORKAREABASE $WORKAREABASE
} else {
	set _WORKAREABASE 0x20000000
}
if { [info exists WORKAREASIZE] } {
	set _WORKAREASIZE $WORKAREASIZE
} else {
    # SRAM size is 36K
	set _WORKAREASIZE 0x9000
}

$_TARGETNAME configure -work-area-phys $_WORKAREABASE -work-area-size $_WORKAREASIZE -work-area-backup 0

#set _FLASHNAME $_CHIPNAME.flash

# Configure memory regions (MAIN flash and CCFG)
#flash bank $_FLASHNAME.ccfg cc2340r5 0x4e020000 0x00000800 0 0 $_TARGETNAME
#flash bank $_FLASHNAME.main cc2340r5 0x00000000 0x00080000 0 0 $_TARGETNAME

# Soft reset configuration (?)
cortex_m reset_config sysresetreq

$_TARGETNAME configure -event examine-start {
	# Print info
	# echo "info"
	# cmsis-dap info
	# echo "info"

	# Print current device status
	set device_status [$::_CHIPNAME.dap apreg 1 0xc]
	echo "DEVICESTATUS: $device_status"

	# If at least one of bits 14 or 15 is not 1 (BOOTSTA field) it means
	# the device is not in application boot flow. Check if it is a blank device
	if { [expr { $device_status & 0xc000 }] != 0xc000 } {
		cc2340r5_handle_blank_device
	}

	# Print current device status
	set device_status [$::_CHIPNAME.dap apreg 1 0xc]
	echo "DEVICESTATUS: $device_status"
}

$_TARGETNAME configure -event examine-fail {
	echo "examine fail"
}

$_TARGETNAME configure -event examine-end {
	echo "examine-end"
}

# Check if the current device is a blank device (i.e., both MAIN flash and CCFG are empty)
# Flash a dummy application if that is the case
proc cc2340r5_handle_blank_device {} {
	# Reset the device
	echo "cmd reset"
	cmsis-dap cmd 0x10 0x20 0xA0 0x00 0x00 0x00 0x00
	cmsis-dap cmd 0x10 0xA0 0xA0 0x00 0x00 0x00 0x00
	echo "cmd reset"

	# Still don't understand how `dap init` works and why/if it is needed, but it seems necessary
	# for the execution of the following instructions after the reset with cmsis-dap commands
	dap init

	# Read DEVICESTATUS register
	echo "read"
	set device_status [$::_CHIPNAME.dap apreg 1 0xc]
	echo "DEVICESTATUS: $device_status"
	echo "read"

	# Execute noop to check if SACI is working correctly (SACI command value 0x1)
	set SACI_CMD_MISC_NO_OPERATION 0x1
	cc2340r5_execute_saci_command $SACI_CMD_MISC_NO_OPERATION

	# Check if MAIN flash is empty (SACI command value 0x10)
	# Parameter word 1 - firstSectorAddr: Address of the first byte of the first sector
	# Parameter word 2 - byteCount: Number of bytes to calculate CRC32 over
	# Parameter word 3 - expCrc32: Expected CRC32
	echo "Checking MAIN flash..."
	set SACI_CMD_FLASH_VERIFY_MAIN_SECTORS 0x80000010
	set rxd [cc2340r5_execute_saci_command $SACI_CMD_FLASH_VERIFY_MAIN_SECTORS 0x00000000 0x80000 0x0]
	# If first 24 bits of RXD match with first 24 bits of the command, the MAIN flash is empty
	set main_empty [ expr {[ expr { $SACI_CMD_FLASH_VERIFY_MAIN_SECTORS & 0x00ffffff }] == [ expr { $rxd & 0x00ffffff }]}]
	echo "MAIN flash empty: $main_empty"

	# Check if CCFG is empty (SACI command value 0x11)
	# Parameter word 1 - expBootCfgCrc32: Expected CRC32 of the boot configuration part
	# Parameter word 2 - expCentralCrc32: Expected CRC32 of the central part
	# Parameter word 3 - expUserRecCrc32: Expected CRC32 of the user record part
	# Parameter word 4 - expDebugCfgCrc32: Expected CRC32 of the debug configuration part
	echo "Checking CCFG..."
	set SACI_CMD_FLASH_VERIFY_CCFG_SECTOR 0x80000011
	set rxd [cc2340r5_execute_saci_command $SACI_CMD_FLASH_VERIFY_CCFG_SECTOR 0x0 0x0 0x0 0x0]
	# If first 24 bits of RXD match with first 24 bits of the command, the CCFG is empty
	set ccfg_empty [ expr {[ expr { $SACI_CMD_FLASH_VERIFY_CCFG_SECTOR & 0x00ffffff }] == [ expr { $rxd & 0x00ffffff }]}]
	echo "CCFG empty: $ccfg_empty"

	# If both MAIN flash and CCFG are empty, flash dummy application (SACI command value 0x0c)
	if {[ expr { $main_empty == 1 }] && [ expr { $ccfg_empty == 1 }]} {
		echo "Writing dummy application..."

		# Flash MAIN (SACI command 0x0e)
		# Parameter word 1  - key: Flash operation key (magic number) (0xB7E3A08F)
		# Parameter word 2  - firstByteAddr: Address of the first byte to be programmed
		# Parameter word 3+ - data: Bytes to be programmed
		echo "Flashing MAIN..."
		set SACI_CMD_FLASH_PROG_MAIN_SECTOR 0x000c000e
		cc2340r5_execute_saci_command $SACI_CMD_FLASH_PROG_MAIN_SECTOR 0xB7E3A08F 0x00000000 0x20001000 0x00000009 0xE7FEB500

		# Flash CCFG (SACI command 0x0c)
		# Parameter word 1     - key: Flash operation key (magic number) (0xB7E3A08F)
		# Parameter word 513:2 - data: Bytes to be programmed
		echo "Flashing CCFG..."
		set SACI_CMD_FLASH_PROG_CCFG_SECTOR 0x0c
		cc2340r5_execute_saci_command $SACI_CMD_FLASH_PROG_CCFG_SECTOR 0xB7E3A08F 0xFFFFFFFF 0x00000000 0x00000000 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xAAAAAAAA 0x0000000F 0xFFFFFFFF 0xFFFFFFFF 0x00000000 0xFFFFFFFF 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x4C1584B6 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x15D70E0C 0x0000A55A 0x03020101 0x150D0805 0x36E4D76D 0xDF31F4EB 0xEE15AE95 0xE48EBA03 0xD83FC6C4 0x5E673F45 0x01C2D774 0xE558902C 0x527294A2

		# Check if CCFG is empty (SACI command value 0x11)
		# Parameter word 1 - expBootCfgCrc32: Expected CRC32 of the boot configuration part
		# Parameter word 2 - expCentralCrc32: Expected CRC32 of the central part
		# Parameter word 3 - expUserRecCrc32: Expected CRC32 of the user record part
		# Parameter word 4 - expDebugCfgCrc32: Expected CRC32 of the debug configuration part
		echo "Checking CCFG (CRC check)..."
		set SACI_CMD_FLASH_VERIFY_CCFG_SECTOR 0x00000011
		cc2340r5_execute_saci_command $SACI_CMD_FLASH_VERIFY_CCFG_SECTOR 0x0 0x0 0x0 0x0

		# SWD to DORMANT
		cmsis-dap cmd 0x12 0x48 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xBC 0xE3

		# Reset the device
		echo "cmd reset"
		cmsis-dap cmd 0x10 0x20 0xA0 0x00 0x00 0x00 0x00
		cmsis-dap cmd 0x10 0xA0 0xA0 0x00 0x00 0x00 0x00
		echo "cmd reset"

		# Repeat the same sequence OpenOCD does at the beginning of the connection
		cmsis-dap cmd 0x00 0xF0
		cmsis-dap cmd 0x00 0x04
		cmsis-dap cmd 0x00 0x03
		cmsis-dap cmd 0x02 0x01
		cmsis-dap cmd 0x00 0xFF
		cmsis-dap cmd 0x00 0xFE
		cmsis-dap cmd 0x10 0x00 0x00 0x00 0x00 0x00 0x00
		cmsis-dap cmd 0x11 0x80 0x96 0x98 0x00
		cmsis-dap cmd 0x04 0x00 0x40 0x00 0x00 0x00
		cmsis-dap cmd 0x13 0x00
		cmsis-dap cmd 0x01 0x00 0x01
		cmsis-dap cmd 0x01 0x01 0x01
		cmsis-dap cmd 0x11 0x80 0x96 0x98 0x00
		cmsis-dap cmd 0x03
		cmsis-dap cmd 0x02 0x01
		cmsis-dap cmd 0x12 0x88 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0x9E 0xE7 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0x00
		cmsis-dap cmd 0x11 0x80 0x96 0x98 0x00
		cmsis-dap cmd 0x05 0x00 0x01 0x02
		cmsis-dap cmd 0x03
		cmsis-dap cmd 0x02 0x01
		cmsis-dap cmd 0x12 0x28 0xFF 0x75 0x77 0x77 0x67
		cmsis-dap cmd 0x11 0x80 0x96 0x98 0x00
		cmsis-dap cmd 0x03
		cmsis-dap cmd 0x02 0x01
		cmsis-dap cmd 0x12 0xE0 0xFF 0x92 0xF3 0x09 0x62 0x95 0x2D 0x85 0x86 0xE9 0xAF 0xDD 0xE3 0xA2 0x0E 0xBC 0x19 0xA0 0xF1 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0x00
		cmsis-dap cmd 0x11 0x80 0x96 0x98 0x00
		cmsis-dap cmd 0x05 0x00 0x01 0x02
		cmsis-dap cmd 0x05 0x00 0x01 0x00 0x1E 0x00 0x00 0x00
		cmsis-dap cmd 0x05 0x00 0x05 0x08 0x00 0x00 0x00 0x00 0x04 0x20 0x00 0x00 0x50 0x06 0x04 0x00 0x00 0x00 0x50 0x06
		cmsis-dap cmd 0x05 0x00 0x01 0x06
		cmsis-dap cmd 0x05 0x00 0x03 0x06 0x04 0x00 0x00 0x00 0x50 0x06
		cmsis-dap cmd 0x05 0x00 0x03 0x08 0x00 0x00 0x00 0x01 0x0F 0x0E
	}
}

# Execute a SACI command.
# Parameters:
# 	command: The value representing the SACI command to execute
# 	args: List of parameter words
# Returns:
# 	The value contained in the RXD register after the execution of the requested SACI command
proc cc2340r5_execute_saci_command {command args} {
	# Read TXCTL (0x204) (for debug purposes)
	set txctl [$::_CHIPNAME.dap apreg 2 0x4]
	echo "txctl: $txctl"

	# Read RXCTL (0x20c) (for debug purposes)
	set rxctl [$::_CHIPNAME.dap apreg 2 0xc]
	echo "rxctl: $rxctl"

	# Set bit 1 of TXCTL (0x204): CMD_START
	# Indicates that TXD contains the first word of a command
	$::_CHIPNAME.dap apreg 2 0x4 0x2

	# Set TXD (0x200)
	$::_CHIPNAME.dap apreg 2 0x0 $command

	# Read TXCTL (0x204) (for debug purposes)
	set txctl [$::_CHIPNAME.dap apreg 2 0x4]
	echo "txctl: $txctl"

	# Clear TXCTL (0x204)
	$::_CHIPNAME.dap apreg 2 0x4 0x0

	# Write additional parameter words
	foreach {param_word} $args {
		# echo "param_word: $param_word"
		$::_CHIPNAME.dap apreg 2 0x0 $param_word
	}

	# Wait for the command to finish the execution
	# Probably this delay could be optimized
	sleep 1000

	# Read RXCTL (0x20c) (for debug purposes)
	set rxctl [$::_CHIPNAME.dap apreg 2 0xc]
	echo "rxctl: $rxctl"

	# Read RXD (0x208) (to retrieve the response, if relevant)
	set rxd [$::_CHIPNAME.dap apreg 2 0x8]
	echo "rxd  : $rxd"

	return $rxd
}
