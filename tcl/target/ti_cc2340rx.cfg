# SPDX-License-Identifier: GPL-2.0-or-later
# Copyright (C) 2024 Texas Instruments Incorporated - https://www.ti.com/
#

source [find bitsbytes.tcl]
source [find target/swj-dp.tcl]

proc debug_print { args } {
	set distanceToTop [info level]
	set call_stack ""
	for {set i 1} {$i < $distanceToTop} {incr i} {
          set callerlevel [expr {$distanceToTop - $i}]
          set caller [info level $callerlevel]
		  set call_stack $caller:$call_stack
    }
	set call_stack root:$call_stack
	puts "XXXXXX:DEBUG($call_stack): $args"
}

# Device info
if { [info exists CHIPNAME] } {
	set _CHIPNAME $CHIPNAME
} else {
	set _CHIPNAME cc2340rx
}

if { [info exists DAP_SWD_ID] } {
	set _DAP_SWD_ID $DAP_SWD_ID
} else {
	set _DAP_SWD_ID 0x6ba02477
}

set _TARGETNAME $_CHIPNAME.cpu
set _DAPNAME $_CHIPNAME.dap

# Create and add DAP and target
swj_newdap $_CHIPNAME cpu -irlen 4 -expected-id $_DAP_SWD_ID
dap create $_DAPNAME -chain-position $_TARGETNAME
target create $_TARGETNAME cortex_m -dap $_CHIPNAME.dap -defer-examine

# Soft reset configuration
cortex_m reset_config sysresetreq

$_TARGETNAME configure -event examine-start {
	dap init
}

$_TARGETNAME configure -event examine-fail {
	debug_print "examine fail"
	set device_status [$::_DAPNAME apreg 1 0xc]
	debug_print "gdb-attach: DEVICESTATUS: $device_status"
}

$_TARGETNAME configure -event gdb-attach {

    $::_TARGETNAME arp_examine
    # gdb-attach default rule
    halt 1000
}

set _saci_mbox_ap 0x2
set _reg_txd 0x0
set _reg_txctl 0x4
set _reg_rxd 0x8
set _reg_rxctl 0xc

proc cc2340r5_saci_enter { } {
	# Reset the device
	debug_print SACI Enter
	cmsis-dap cmd 0x10 0x20 0xA0 0x00 0x00 0x00 0x00
	cmsis-dap cmd 0x10 0xA0 0xA0 0x00 0x00 0x00 0x00
	dap init
	reset
}

proc cc2340r5_wait_txctl_empty {} {

	debug_print Wait for txctl empty
	# Wait until TXCTL::TXD_FULL/TXSTA = 0
	set timeout 1000
	while { [expr { [$::_CHIPNAME.dap apreg $::_saci_mbox_ap $::_reg_txctl] & 0x1}] != 0x0 } {
		sleep 1
		debug_print iteration: $timeout
		set timeout [expr {$timeout - 1}]
		if { $timeout == 0 } {
			set txctl [$::_CHIPNAME.dap apreg $::_saci_mbox_ap $::_reg_txctl]
			return -code error [format "TXCTL=0x%08x timeout" $txctl]
		}
	}
}

proc cc2340r5_saci_send {command args} {

	debug_print $command $args
	# Max sure that the txctl is empty status
	eval cc2340r5_wait_txctl_empty

	# Set bit 1 of TXCTL (0x204): CMD_START
	# Indicates that TXD contains the first word of a command
	$::_CHIPNAME.dap apreg $::_saci_mbox_ap $::_reg_txctl 0x2
	# Set the command data
	$::_CHIPNAME.dap apreg $::_saci_mbox_ap $::_reg_txd $command

	foreach arg $args {
		debug_print first argument $arg
		eval cc2340r5_wait_txctl_empty
		# Clear bit 1 of TXCTL (0x204): To indicate follow on data
		$::_CHIPNAME.dap apreg $::_saci_mbox_ap $::_reg_txctl 0x0
		# Follow on argument
		$::_CHIPNAME.dap apreg $::_saci_mbox_ap $::_reg_txd $arg
	}
	eval cc2340r5_wait_txctl_empty
}

proc cc2340r5_wait_rxctl_full {} {

	debug_print Wait for rxctl full
	# Wait until RXCTL::RXD_FULL/RXDSTA = 1
	set timeout 1000
	while { [expr { [$::_CHIPNAME.dap apreg $::_saci_mbox_ap $::_reg_rxctl] & 0x1}] != 0x1 } {
		sleep 1
		debug_print iteration: $timeout
		set timeout [expr {$timeout - 1}]
		if { $timeout == 0 } {
			set rxctl [$::_CHIPNAME.dap apreg $::_saci_mbox_ap $::_reg_rxctl]
			set error_stat ""
			if	{ [expr { $rxctl & 0x2}] != 0x0} {
				set error_stat "$error_stat CMD_ABORTED"
			}
			if	{ [expr { $rxctl & 0x4}] != 0x0} {
				set error_stat "$error_stat CMD_WORKING"
			}
			if	{ [expr { $rxctl & 0x8}] != 0x0} {
				set error_stat "$error_stat CMD_ERROR"
			}
			return -code error [format "RXCTL=0x%08x timeout: $error_stat" $rxctl]
		}
	}
}

proc cc2340r5_saci_get {num_args} {

	debug_print $num_args values

	set resp {}
	while { $num_args > 0 } {
		eval cc2340r5_wait_rxctl_full
		set rxd [$::_CHIPNAME.dap apreg $::_saci_mbox_ap $::_reg_rxd]
		lappend resp $rxd
		set num_args [expr {$num_args - 1}]
	}

	return $resp
}

# Get device Status
proc cc2340r5_get_device_status {} {
	set device_status [$::_CHIPNAME.dap apreg 1 0xc]
	return $device_status
}

# Check SACI connection
proc cc2340r5_saci_cmd_misc_no_operation {} {
	eval cc2340r5_saci_send 0x01
	set resp [cc2340r5_saci_get 1]
	return $resp
}

# Print DIE ID
proc cc2340r5_saci_cmd_misc_get_die_id {} {
	eval cc2340r5_saci_send 0x03
	set resp [cc2340r5_saci_get 5]
	return $resp
}

# Shutdown the device
proc cc2340r5_saci_cmd_debug_exit_saci_shutdown {} {
	eval cc2340r5_saci_send 0x08
	# may not get a response
	set resp [cc2340r5_saci_get 1]
	return $resp
}

